//
//// Java program to implement normal Sieve 
//// of Eratosthenes using simple optimization 
//// to reduce size of prime array to half and 
//// reducing iterations. 
//import java.util.Arrays; 
//  
//class GFG 
//{ 
//    static void normalSieve(int n) 
//    { 
//        // prime[i] is going to store true if 
//        // if i*2 + 1 is composite. 
//        boolean prime[]=new boolean[n / 2]; 
//        Arrays.fill(prime, false); 
//      
//        // 2 is the only even prime so we can 
//        // ignore that. Loop starts from 3. 
//        for (int i = 3 ; i * i < n; i += 2) 
//        { 
//            // If i is prime, mark all its 
//            // multiples as composite 
//            if (prime[i / 2] == false) 
//                for (int j = i * i; j < n; j += i * 2) 
//                    prime[j / 2] = true; 
//        } 
//      
//        // writing 2 separately 
//        System.out.print("2 "); 
//      
//        // Printing other primes 
//        for (int i = 3; i < n ; i += 2) 
//            if (prime[i / 2] == false) 
//                System.out.println(i + " "); 
//    } 
//    public static void main (String[] args) 
//    { 
//        int n = 10000000 ; 
//        normalSieve(n); 
//    } 
//} 
//  

// JAVA Code to implement Bitwise  
// Sieve of Eratosthenes. 
import java.util.*;

class GFG {

	// Checks whether x is prime or composite
	static int ifnotPrime(int prime[], int x) {
		// checking whether the value of element
		// is set or not. Using prime[x/64],
		// we find the slot in prime array.
		// To find the bit number, we divide x
		// by 2 and take its mod with 32.
		return (prime[x / 64] & (1 << ((x >> 1) & 31)));
	}

	// Marks x composite in prime[]
	static void makeComposite(int prime[], int x) {
		// Set a bit corresponding to given element.
		// Using prime[x/64], we find the slot
		// in prime array. To find the bit number,
		// we divide x by 2 and take its mod with 32.
		prime[x / 64] |= (1 << ((x >> 1) & 31));
	}

	// Prints all prime numbers smaller than n.
	static void bitWiseSieve(int n) {
		// Assuming that n takes 32 bits,
		// we reduce size to n/64 from n/2.
		int prime[] = new int[n / 64 + 1];

		// 2 is the only even prime so we
		// can ignore that loop starts from
		// 3 as we have used in sieve of
		// Eratosthenes .
		for (int i = 3; i * i <= n; i += 2) {

			// If i is prime, mark all its
			// multiples as composite
			if (ifnotPrime(prime, i) == 0)
				for (int j = i * i, k = i << 1; j < n; j += k)
					makeComposite(prime, j);
		}

		// writing 2 separately
		System.out.printf("2 ");

		// Printing other primes
		
			if (ifnotPrime(prime, 1000000) != 0)
				System.out.println(1000000);


	/* Driver program to test above function */
	public static void main(String[] args) {
		int n = 1000000;
		bitWiseSieve(n);
	}
}

// This code is contributed by Arnav Kr. Mandal.     